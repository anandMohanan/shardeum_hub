import type { SharediumProject } from "@prisma/client";
import type { NextPage } from "next";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { api } from "../utils/api";
enum Category {
  DEFI = "DEFI",
  NFT = "NFT",
  GAMING = "GAMING",
  OTHER = "OTHER",
}
const Submit: NextPage = () => {
  const [name, setName] = useState<string>("");
  const [about, setAbout] = useState<string>("");
  const [description, setDescription] = useState<string>("");
  const [discordLink, setDiscordLink] = useState<string>("");
  const [twitterLink, setTwitterLink] = useState<string>("");
  const [website, setWebsite] = useState<string>("");
  console.log("outside comp");
  const [category, setCategory] = useState<Category>(Category.NFT);
  // call the mutation from the api client (generated by tRPC) and pass the input data as an argument to the mutation

  const [resultState, setResultState] = useState<SharediumProject>();
  const res = api.project.createSharediumProject.useMutation();
  const addToRedis = api.redisFunc.createItem.useMutation();

  const router = useRouter();

  const onSubmitBtn = () => {
    console.log(name, about, description, discordLink, twitterLink, website);

    res.mutate({
      name,
      about,
      description,
      discordLink,
      twitterLink,
      website,
      category,
    });

    // res.isError ? (
    //     return <h1>Error </h1>
    // ) : ""
    // console.log("error" + res.isError);
    // setTimeout(() => {}, 1000000);
    // if (!res.isError) {
    //   console.log("res" + res.data);

    //   await addToRedis.mutateAsync({
    //     id: res.data?.id!,
    //     name: name,
    //   });
    //   router.push("/");
    // }
    addToRedis.mutate({
      name: name,
    });

    if (!res.isError) {
      router
        .push("/")
        .catch((e) => console.log(`Error at submit ${e as string}`));
    }
    // return res;
  };
  // const pushToRedis = async (id: string | undefined) => {
  //   await addToRedis.mutateAsync({
  //     name: name,
  //   });
  // };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const res = await onSubmitBtn();
  //   setResultState(res.data);
  //   await pushToRedis(res.data?.id);
  // };

  return (
    <>
      {res.isError ? (
        <>
          <h1>
            Error -<span> {res.error.message}</span>{" "}
          </h1>
        </>
      ) : (
        <>
          <main>
            <section className="relative h-full min-h-screen w-full py-40">
              <div
                className="absolute top-0 h-full w-full bg-blueGray-800 bg-full bg-no-repeat"
                style={{
                  backgroundImage:
                    "url('https://raw.githubusercontent.com/creativetimofficial/notus-nextjs/main/public/img/register_bg_2.png')",
                }}
              ></div>
              <div className="container mx-auto h-full px-4">
                <div className="flex h-full content-center items-center justify-center">
                  <div className="w-full px-4 lg:w-4/12">
                    <div className="relative mb-6 flex w-full min-w-0 flex-col break-words rounded-lg border-0 bg-blueGray-200 shadow-lg">
                      <div className="mb-0 rounded-t px-6 py-6">
                        <div className="mb-3 text-center">
                          <h6 className="text-sm font-bold text-blueGray-500">
                            Sign in with
                          </h6>
                        </div>

                        <hr className="border-b-1 mt-6 border-blueGray-300" />
                      </div>
                      <div className="flex-auto px-4 py-10 pt-0 lg:px-10">
                        <div className="mb-3 text-center font-bold text-blueGray-400">
                          <small>Or sign in with credentials</small>
                        </div>
                        <form>
                          <div className="relative mb-3 w-full">
                            <label
                              className="mb-2 block text-xs font-bold uppercase text-blueGray-600"
                              htmlFor="grid-password"
                            >
                              Email
                            </label>
                            <input
                              type="email"
                              className="w-full rounded border-0 bg-white px-3 py-3 text-sm text-blueGray-600 placeholder-blueGray-300 shadow transition-all duration-150 ease-linear focus:outline-none focus:ring"
                              placeholder="Email"
                            />
                          </div>

                          <div className="relative mb-3 w-full">
                            <label
                              className="mb-2 block text-xs font-bold uppercase text-blueGray-600"
                              htmlFor="grid-password"
                            >
                              Password
                            </label>
                            <input
                              type="password"
                              className="w-full rounded border-0 bg-white px-3 py-3 text-sm text-blueGray-600 placeholder-blueGray-300 shadow transition-all duration-150 ease-linear focus:outline-none focus:ring"
                              placeholder="Password"
                            />
                          </div>
                          <div>
                            <label className="inline-flex cursor-pointer items-center">
                              <input
                                id="customCheckLogin"
                                type="checkbox"
                                className="form-checkbox ml-1 h-5 w-5 rounded border-0 text-blueGray-700 transition-all duration-150 ease-linear"
                              />
                              <span className="ml-2 text-sm font-semibold text-blueGray-600">
                                Remember me
                              </span>
                            </label>
                          </div>

                          <div className="mt-6 text-center">
                            <button
                              className="mr-1 mb-1 w-full rounded bg-slate-600 px-6 py-3 text-sm font-bold uppercase text-white shadow outline-none transition-all duration-150 ease-linear hover:shadow-lg focus:outline-none active:bg-blueGray-600"
                              type="button"
                            >
                              Sign In
                            </button>
                          </div>
                        </form>
                      </div>
                    </div>
                    <div className="relative mt-6 flex flex-wrap">
                      <div className="w-1/2">
                        <Link
                          href="#pablo"
                          onClick={(e) => e.preventDefault()}
                          className="text-blueGray-200"
                        >
                          <small>Forgot password?</small>
                        </Link>
                      </div>
                      <div className="w-1/2 text-right">
                        <Link
                          href="/auth/register"
                          className="text-blueGray-200"
                        >
                          <small>Create new account</small>
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>
          </main>
          <h1>hello</h1>
          <form className="mb-4 rounded bg-white px-8 pt-6 pb-8 shadow-md">
            <label className="mb-2 block text-sm font-bold text-gray-700">
              Name
            </label>
            <input
              className="bg-red-400"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
            <label className="mb-2 block text-sm font-bold text-gray-700">
              About
            </label>

            <input
              className="bg-lime-700"
              value={about}
              onChange={(e) => setAbout(e.target.value)}
            />
            <label className="mb-2 block text-sm font-bold text-gray-700">
              Description
            </label>
            <input
              className="bg-lime-700"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
            <label className="mb-2 block text-sm font-bold text-gray-700">
              DiscordLink
            </label>
            <input
              className="bg-lime-700"
              value={discordLink}
              onChange={(e) => setDiscordLink(e.target.value)}
            />
            <label className="mb-2 block text-sm font-bold text-gray-700">
              TwitterLink
            </label>
            <input
              className="bg-lime-700"
              value={twitterLink}
              onChange={(e) => setTwitterLink(e.target.value)}
            />
            <label className="mb-2 block text-sm font-bold text-gray-700">
              Website
            </label>
            <input
              className="bg-lime-700"
              value={website}
              onChange={(e) => setWebsite(e.target.value)}
            />
            <label className="mb-2 block text-sm font-bold text-gray-700">
              Category
            </label>
            <select
              name="CATEGORY"
              onChange={(e) => setCategory(e.target.value as Category)}
            >
              <option value={Category.NFT}>NFT</option>
              <option value={Category.DEFI}>DEFI</option>
              <option value={Category.GAMING}>GAMING</option>
              <option value={Category.OTHER}>OTHER</option>
            </select>
          </form>

          <button onClick={() => onSubmitBtn()}>Submit your project</button>
        </>
      )}
    </>
  );
};

export default Submit;
